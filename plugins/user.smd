/**
//══════════════════════════════════════════════════════════════════════════════════════════════════════//
//                                                                                                      //
//                                ＷＨＡＴＳＡＰＰ ＢＯＴ－ＭＤ ＢＥＴＡ                                   //
//                                                                                                      // 
//                                         Ｖ：1．2．8                                                   // 
//                                                                                                      // 
//            ███████╗██╗   ██╗██╗  ██╗ █████╗ ██╗██╗         ███╗   ███╗██████╗                        //
//            ██╔════╝██║   ██║██║  ██║██╔══██╗██║██║         ████╗ ████║██╔══██╗                       //
//            ███████╗██║   ██║███████║███████║██║██║         ██╔████╔██║██║  ██║                       //
//            ╚════██║██║   ██║██╔══██║██╔══██║██║██║         ██║╚██╔╝██║██║  ██║                       //
//            ███████║╚██████╔╝██║  ██║██║  ██║██║███████╗    ██║ ╚═╝ ██║██████╔╝                       //
//            ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚══════╝    ╚═╝     ╚═╝╚═════╝                        //
//                                                                                                      //
//                                                                                                      //
//                                                                                                      //
//══════════════════════════════════════════════════════════════════════════════════════════════════════//
*
   * @project_name : Suhail-Md
   * @author : Suhail Tech Info
   * @youtube : https://www.youtube.com/@SuhailTechInfo
   * @description : Suhail-Md ,A Multi-functional whatsapp user bot.
   * @version 1.2.8
*
* 
   * Created By Suhail Tech Info.
   * © 2024 Suhail-Md.
*/



let Suhail_Md = "Suhail MD Whatsapp bot md"



const { tlang, getAdmin, prefix, Config, sck, sck1, fetchJson, getBuffer, runtime, smd } = require('../lib');
const { Sticker, createSticker, StickerTypes } = require('wa-sticker-formatter');
const fs = require('fs');
const axios = require('axios');
const fetch = require('node-fetch');
const cmd = smd;

cmd({
    'pattern': 'jid',
    'desc': 'get jid of all user in a group.',
    'category': 'admin',
    'filename': __filename,
    'use': '<@user>'
}, async ({ jid, reply, quoted }) => {
    if (quoted) return reply(quoted.sender);
    else return reply(jid);
});

cmd({
    'pattern': 'getpp',
    'desc': 'Get Profile Pic For Given User',
    'category': 'admin',
    'filename': __filename
}, async (context) => {
    try {
        let userJid = context.reply_message ? context.reply_message.sender : context.mentionedJid[0] ? context.mentionedJid[0] : context.from;
        let profilePicUrl;
        try {
            profilePicUrl = await context.bot.profilePictureUrl(userJid, 'image');
        } catch (error) {
            return context.reply('```Profile Pic Not Fetched```');
        }
        return await context.sendMessage(context.jid, {
            'image': { 'url': profilePicUrl },
            'caption': '\n   *---Profile Pic Is Here---*\n' + Config.caption
        }, { 'quoted': context });
    } catch (error) {
        await context.error(error + '\ncommand : getpp', error);
    }
});

cmd({
    'pattern': 'whois',
    'desc': 'Makes wa me of quoted or mentioned user.',
    'category': 'admin',
    'use': '<reply to any person>',
    'filename': __filename
}, async (context) => {
    try {
        let userJid = context.reply_message ? context.reply_message.sender : context.mentionedJid[0] ? context.mentionedJid[0] : false;
        if (!userJid && context.isGroup) {
            const groupMetadata = await context.bot.groupMetadata(context.jid, 'image').catch(() => 'https://telegra.ph/file/29a8c892a1d18fdb26028.jpg') || THUMB_IMAGE;
            const groupName = context.metadata.subject;
            const groupDescription = context.metadata.desc?.toString() || '_not set_';
            const groupOwner = context.metadata.owner || context.participants.find(participant => participant.admin === 'superadmin')?.id || false;
            const groupAdmins = context.participants.filter(participant => participant.admin).map((participant, index) => `  ${index + 1}. wa.me/${participant.id.split('@')[0]}`).join('\n');
            let groupInfo = `\n      *「 GROUP INFORMATION 」*\n*▢ NAME :*\n   • ${groupName}\n*▢ Members :*\n   • ${context.metadata.participants.length}\n*▢ Group Owner :*\n   • ${groupOwner ? `wa.me/${groupOwner.split('@')[0]}` : 'notFound'}\n*▢ Admins :*\n${groupAdmins}\n*▢ Description :*\n   • ${groupDescription}\n\ncommand : whois`;
            return await context.reply(groupMetadata, { 'caption': groupInfo }, 'image');
        } else {
            if (!userJid) return context.reply('*_Please Reply To A Person!_*');
            try {
                var userStatus = await context.bot.fetchStatus(userJid);
                var userBio = userStatus.status;
                var userSetAt = userStatus.setAt.toString();
                var userSetAtParts = userSetAt.split(' ');
                if (userSetAtParts.length > 3) userSetAt = userSetAtParts.slice(0, 5).join(' ');
            } catch {
                var userBio = '_not set_';
                var userSetAt = '';
            }
            var userName = userJid.split('@')[0];
            let profilePicUrl;
            try {
                profilePicUrl = await context.bot.profilePictureUrl(userJid, 'image');
            } catch (error) {
                profilePicUrl = 'https://telegra.ph/file/29a8c892a1d18fdb26028.jpg';
            }
            var userNameFromJid = await context.bot.getName(userJid);
            return await context.sendMessage(context.jid, {
                'image': { 'url': profilePicUrl },
                'caption': `\n╔════◇\n║ *『Person's Information』*\n║ \n║ *🍫Name :* ${userNameFromJid}\n║ *👤Num :* ${userName}\n║ *🎐Bio :* ${userBio}\n║ *🌟SetAt :* ${userSetAt}\n\ncommand : whois`
            }, { 'quoted': context });
        }
    } catch (error) {
        await context.error(error + '\ncommand : whois', error);
    }
});

cmd({
    'pattern': 'wa',
    'desc': 'Makes wa me for user.',
    'category': 'admin',
    'filename': __filename
}, async (context) => {
    try {
        let userJid = context.reply_message ? context.reply_message.sender : context.mentionedJid[0] ? context.mentionedJid[0] : false;
        await context.reply(!userJid ? '*Please Reply Or Mention A User*' : 'https://wa.me/' + userJid.split('@')[0]);
    } catch (error) {
        await context.error(error + '\ncommand : wa', error, false);
    }
});

cmd({
    'pattern': 'mee',
    'desc': 'Makes photo of replied sticker.',
    'category': 'admin',
    'filename': __filename
}, async (context) => {
    try {
        return await context.reply('https://wa.me/' + context.sender.split('@')[0]);
    } catch { }
});
