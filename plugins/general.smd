/**
//══════════════════════════════════════════════════════════════════════════════════════════════════════//
//                                                                                                      //
//                                ＷＨＡＴＳＡＰＰ ＢＯＴ－ＭＤ ＢＥＴＡ                                   //
//                                                                                                      // 
//                                         Ｖ：1．2．8                                                   // 
//                                                                                                      // 
//            ███████╗██╗   ██╗██╗  ██╗ █████╗ ██╗██╗         ███╗   ███╗██████╗                        //
//            ██╔════╝██║   ██║██║  ██║██╔══██╗██║██║         ████╗ ████║██╔══██╗                       //
//            ███████╗██║   ██║███████║███████║██║██║         ██╔████╔██║██║  ██║                       //
//            ╚════██║██║   ██║██╔══██║██╔══██║██║██║         ██║╚██╔╝██║██║  ██║                       //
//            ███████║╚██████╔╝██║  ██║██║  ██║██║███████╗    ██║ ╚═╝ ██║██████╔╝                       //
//            ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚══════╝    ╚═╝     ╚═╝╚═════╝                        //
//                                                                                                      //
//                                                                                                      //
//                                                                                                      //
//══════════════════════════════════════════════════════════════════════════════════════════════════════//
*
   * @project_name : Suhail-Md
   * @author : Suhail Tech Info
   * @youtube : https://www.youtube.com/@SuhailTechInfo
   * @description : Suhail-Md ,A Multi-functional whatsapp user bot.
   * @version 1.2.8
*
* 
   * Created By Suhail Tech Info.
   * © 2024 Suhail-Md.
*/
 


let Suhail_Md = "Suhail MD Whatsapp bot md"

const util = require('util');
const fs = require('fs-extra');
const { cmd } = require('../lib/plugins');
const {
    formatp,
    formatDate,
    TelegraPh,
    aitts,
    tlang,
    botpic,
    smd,
    prefix,
    fetchJson,
    runtime,
    Config,
    parsedJid,
    sleep,
    createUrl
} = require('../lib');
const axios = require('axios');
const fetch = require('node-fetch');
const os = require('os');
const speed = require('performance-now');
const API_KEY = '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';

async function aiResponce(chat, type, prompt = '') {
    let response = '';
    try {
        if (type === 'gpt') {
            response = await (await axios.get(`http://api.brainshop.ai/get?bid=175685&key=Pg8Wu8mrDQjfr0uv&uid=[${chat.sender.split('@')[0]}]&msg=[${prompt}]`)).data.cnt;
        } else if (type === 'chat') {
            const res = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${Config.OPENAI_API_KEY}`
                },
                body: JSON.stringify({
                    model: 'gpt-3.5-turbo',
                    messages: [
                        { role: 'system', content: 'You are a helpful assistant.' },
                        { role: 'user', content: prompt }
                    ]
                })
            });
            const data = await res.json();
            response = !data.choices || data.choices.length === 0 ? 'No response from chatgpt, sorry!!' : data.choices[0].message.content;
        } else if (type === 'dalle') {
            const res = await fetch('https://api.openai.com/v1/images/generations', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${Config.OPENAI_API_KEY}`
                },
                body: JSON.stringify({
                    model: 'image-alpha-001',
                    prompt: prompt,
                    size: '512x512',
                    response_format: 'url'
                })
            });
            const data = await res.json();
            response = data.data[0].url;
        }
    } catch (error) {
        console.error('Error while getting AI response:', error);
        return 'Error while getting AI response';
    }
    return response;
}

smd({
    pattern: 'chat',
    desc: 'chat with an AI',
    category: 'ai',
    use: '<Hii, Suhail Tech Info>',
    filename: __filename
}, async (chat, text) => {
    try {
        return chat.reply(await aiResponce(chat, 'chat', text));
    } catch (error) {
        await chat.error(error + '\n\ncommand: chat', error, 'chat');
    }
});

smd({
    pattern: 'dalle',
    desc: 'Generate image using DALL-E',
    category: 'ai',
    use: '<Hii, Suhail Tech Info>',
    filename: __filename
}, async (chat, text) => {
    try {
        if (!text) return await chat.reply('Please provide a prompt for DALL-E');
        const url = 'https://gurugpt.cyclic.app/dalle?prompt=' + encodeURIComponent(text);
        try {
            return await chat.sendMessage(chat.jid, {
                image: { url: url },
                caption: `---Your DALL-E Result---\n${text}\n\n${Config.caption}`
            });
        } catch (error) {
            console.error('Error in DALL-E response:', error);
        }
        if (Config.OPENAI_API_KEY === '' || !Config.OPENAI_API_KEY || !('' + Config.OPENAI_API_KEY).startsWith('sk')) return chat.reply('Invalid ChatGPT API Key, Please Put New Key');
        return await chat.sendMessage(chat.jid, {
            image: { url: await aiResponce(chat, 'dalle', text) },
            caption: `---Your DALL-E Result---\n${Config.caption}`
        });
    } catch (error) {
        await chat.error(error + '\n\ncommand: dalle', error, 'dalle');
    }
});

smd({
    pattern: 'rmbg',
    desc: 'Remove image Background.',
    category: 'ai',
    filename: __filename
}, async (chat) => {
    try {
        if (!Config.REMOVE_BG_KEY) return chat.reply('You Dont Have REMOVE_BG_KEY\nPlease Create RemoveBG KEY from Given Link\nhttps://www.remove.bg/\nAnd Set Key in REMOVE_BG_KEY Var');
        let media = chat.reply_message ? chat.reply_message : chat.mentionedJid[0] ? chat.mentionedJid[0] : chat.from;
        if (!media || !['image', 'video'].includes(media.mtype)) return await chat.send('Invalid format. Please provide both number and Message separated by a comma.');
        let buffer = await chat.bot.downloadAndSaveMediaMessage(media);
        let url = await TelegraPh(buffer);
        try { fs.unlinkSync(buffer); } catch { }
        let response = await aiResponce(chat, 'rmbg', url);
        response ? await chat.sendMessage(response, { caption: Config.caption }, 'image', chat) : await chat.sendMessage('No response from remove.bg, Sorry!!');
    } catch (error) {
        await chat.error(error + '\n\ncommand: rmbg', error, 'rmbg');
    }
});

smd({
    pattern: 'readmore',
    alias: ['rmore', 'readmor'],
    desc: 'Adds *readmore* in given text.',
    category: 'general',
    filename: __filename
}, async (chat, text) => {
    try {
        let message = text ? text : chat.reply_text;
        !message ? message = 'Uhh Dear,Please provide text\nEg:- .readmor text1 readmore text2' : message += ' ';
        message.includes('readmore') ? await chat.reply(message.replace(/readmore/, String.fromCharCode(0x200e).repeat(500))) : await chat.reply(message.replace(' ', String.fromCharCode(0x200e).repeat(500)));
    } catch (error) {
        await chat.error(error + '\n\ncommand: readmore', error, false);
    }
});

let pmtypes = ['image', 'video'];
cmd({
    pattern: 'createurl',
    alias: ['url2'],
    category: 'general',
    filename: __filename,
    desc: 'image to url.',
    use: '<video | image>'
}, async (chat) => {
    try {
        let media = pmtypes.includes(chat.mtype) ? chat : chat.reply_message;
        if (!media || !pmtypes.includes(media?.mtype)) return chat.reply('Uhh Dear, Reply To An Image/Video!');
        let buffer = await chat.bot.downloadAndSaveMediaMessage(media);
        let url = await createUrl(buffer);
        if (!url) return chat.reply('Failed To Create Url!');
        try { fs.unlinkSync(buffer); } catch { }
        await chat.sendMessage(util.format(url), {}, 'suhail', media);
    } catch (error) {
        await chat.error(error + '\n\ncommand: createurl', error);
    }
});

cmd({
    pattern: 'calc',
    desc: 'calculate an equation.',
    category: 'general',
    use: '<equation>',
    filename: __filename
}, async (chat, text) => {
    try {
        if (!text) return await chat.reply('Please enter a math operation\nExample: .calc 22+12');
        let equation = text.replace(/\s+/g, '');
        if (!/^(\d+([-+%*/]\d+)+)$/.test(equation)) return await chat.reply('Please enter a valid mathematical operation.');
        const calculate = expr => new Function('return ' + expr)();
        let result = calculate(equation);
        if (equation.includes('/') && equation.split('/').some(part => part === '0')) return chat.reply('Cannot divide by zero.');
        if (equation.match(/[-+%*/]/).length <= 2) {
            const [num1, operator, num2] = equation.match(/\d+|[-+%*/]/g);
            return await chat.reply(`${num1} ${operator} ${num2} = ${result}`);
        } else return await chat.reply(`Result: ${result}`);
    } catch (error) {
        return await chat.error(error + '\n\ncommand: calc', error);
    }
});

async function getDateTime() {
    const now = new Date();
    const date = now.toISOString().slice(0, 10);
    const time = now.toLocaleTimeString();
    return { date, time };
}

smd({
    pattern: 'repo',
    alias: ['sc', 'git'],
    desc: 'Sends info about repo',
    category: 'general',
    filename: __filename
}, async (chat) => {
    try {
        let { data } = await axios.get('https://api.github.com/repos/SuhailTechInfo/Suhail-Md');
        let info = (`*I am ${Config.botname}*\n\n*❲❒❳ Stars:* ${data?.stargazers_count || '1000+'}\n*❲❒❳ Forks:* ${data?.forks_count || '120+'}\n*❲❒❳ Auther:* SuhailTechInfo\n*❲❒❳ Create:* ${data?.created_at || 'some'}\n*❲❒❳ Repo:* _https://github.com/SuhailTechInfo/Suhail-Md_\n*❲❒❳ Scan:* _${scan}_\n\n${Config.caption ? '\n\n' + Config.caption : ''}`).trim();
        return await chat.sendMessage(chat.jid, { caption: info });
    } catch (error) {
        await chat.error(error + '\n\ncommand: repo', error);
    }
});

smd({
    pattern: 'status',
    alias: ['uptime', 'speed'],
    desc: 'To check bot status',
    category: 'general',
    filename: __filename
}, async (chat) => {
    try {
        const uptime = process.uptime();
        const timestamp = speed();
        const latency = speed() - timestamp;
        let info = (`*I am ${Config.botname}*\n\n*❲❒❳ Speed:* ${latency.toFixed(3)} ms\n*❲❒❳ Uptime:* ${runtime(process.uptime())}\n*❲❒❳ Version:* ${Config.VERSION}\n*❲❒❳ Owner:* ${Config.ownername}\n*❲❒❳ Visit For Tutorial:* _https://www.Youtube.com/c/SuhailTechInfo_\n\n${Config.caption ? '\n\n' + Config.caption : ''}`).trim();
        return await chat.sendMessage(chat.jid, { caption: info });
    } catch { }
});

smd({
    pattern: 'cpu',
    desc: 'To check bot status',
    category: 'general',
    filename: __filename
}, async (chat) => {
    try {
        const memoryUsage = process.memoryUsage();
        const cpus = os.cpus().map(cpu => {
            cpu.total = Object.values(cpu.times).reduce((acc, tv) => acc + tv, 0);
            return cpu;
        });
        const cpuInfo = cpus.reduce((acc, cpu, idx, { length }) => {
            acc.total += cpu.total;
            acc.speed += cpu.speed / length;
            acc.times.user += cpu.times.user;
            acc.times.nice += cpu.times.nice;
            acc.times.sys += cpu.times.sys;
            acc.times.idle += cpu.times.idle;
            acc.times.irq += cpu.times.irq;
            return acc;
        }, { speed: 0, total: 0, times: { user: 0, nice: 0, sys: 0, idle: 0, irq: 0 } });
        const timestamp = speed();
        const latency = speed() - timestamp;
        var start = performance.now();
        var end = performance.now();
        let response = (`*I am ${Config.botname}*\n\n*❲❒❳ Runtime:* ${runtime(process.uptime())}\n*❲❒❳ Speed:* ${latency.toFixed(3)} ms\n*❲❒❳ RAM:* ${formatp(os.totalmem() - os.freemem())} / ${formatp(os.totalmem())}\n\n*❲❒❳ Memory Usage:*\n${Object.keys(memoryUsage).map(key => key.padEnd(Math.max(...Object.keys(memoryUsage).map(k => k.length)), ' ') + ': ' + formatp(memoryUsage[key])).join('\n')}\n\n${cpus[0] ? `*❲❒❳ Total CPU Usage:*\n*${cpus[0].model.trim()} (${cpuInfo.speed} MHZ)*\n${Object.keys(cpuInfo.times).map(type => '-' + type.padEnd(6, ' ') + ': ' + (100 * cpuInfo.times[type] / cpuInfo.total).toFixed(2) + '%').join('\n')}\n\n${cpus.length} CPUs\n${cpus.map((cpu, i) => `*Core ${i + 1}: ${cpu.model.trim()} (${cpu.speed} MHZ)*\n${Object.keys(cpu.times).map(type => '-' + type.padEnd(6, ' ') + ': ' + (100 * cpu.times[type] / cpu.total).toFixed(2) + '%').join('\n')}`).join('\n\n')}` : ''}`).trim();
        await chat.sendMessage(response, {}, '', chat);
    } catch (error) {
        await chat.error(error + '\n\ncommand: cpu', error, 'cpu');
    }
});

smd({
    pattern: 'advt',
    alias: ['advertisement'],
    category: 'ai',
    desc: 'Advertise of your Message, by sending it to provided nmbr range.',
    use: 'advt 9231844741xx,Your_text_here',
    fromMe: true,
    filename: __filename
}, async (chat, text) => {
    try {
        let message = text ? text : chat.reply_text;
        if (!message) return await chat.reply('Provide number with msg to send Anonymously.\nExample advt 9231844741xx,Your_text_here');
        const index = message.indexOf(',');
        if (index === -1) return await chat.send('Invalid format. Please provide both number and Message separated by a comma.');
        let number = '' + message.slice(0, index).trim();
        let msg = message.slice(index + 1).trim() + '\n\n' + Config.caption;
        if (!number.includes('x')) return chat.send('You did not add x in number.\nEx: 9231844741xx,Your_Message_here');
        await chat.send('Sending message to given number range.! It may take some time, so wait please');
        function getLastIndex(str, char) {
            return str.split(char).length - 1;
        }
        var prefix = number.split('x')[0];
        var suffix = number.split('x')[getLastIndex(number, 'x')] ? number.split('x')[getLastIndex(number, 'x')] : '';
        var count = getLastIndex(number, 'x');
        var max;
        if (count == 1) max = 10;
        else if (count == 2) max = 100;
        else if (count == 3) max = 1000;
        else if (count > 3) return await chat.send('Only 3(x) are Allowed in number');
        let sent = 0;
        let sentNumbers = '';
        var lastNumber = '';
        for (let i = 0; i < max; i++) {
            var result = await chat.bot.onWhatsApp('' + prefix + i + suffix + '@s.whatsapp.net');
            if (result[0]) {
                lastNumber = result[0].jid;
                if (sentNumbers.includes(lastNumber)) continue;
                await sleep(1500);
                await chat.bot.sendMessage(lastNumber, { text: msg });
                sentNumbers = sentNumbers + ',' + lastNumber;
                sent += 1;
            }
        }
        return await chat.send(`Advertisement of your Message is Done,\n\nMessage Succesfully sent to ${sent} numbers\nLast_User: ${lastNumber.split('@')[0]}\nSearch_No: ${max} number searched\n\n\n${Config.caption}`);
    } catch (error) {
        await chat.error(error + '\n\ncommand: advt', error, 'advt');
    }
});

const sᴜʜᴀɪʟ_ᴍᴅ_AnonyMsg = {};
let isAnnonyMsgAlive = '';
cmdName = 'anony-msg-';

class AnonymousMsg {
    constructor() {
        this.id = '';
        this.sender = '';
        this.reciever = '';
        this.chat = '';
        this.tellinfo = 0;
        this.howmanyreply = 0;
    }
}

smd({
    pattern: 'anonymsg',
    alias: ['anony', 'anonychat'],
    desc: 'Send anonymous message',
    category: 'ai',
    use: '<Hii, Suhail Tech Info>',
    filename: __filename
}, async (chat, text, { smd }) => {
    try {
        let message = text ? text : chat.reply_text;
        if (!message) return await chat.send(`Provide number with msg to send Anonymously.\nExample: ${prefix}${smd} 9231844741xx,Your_text_here`, {}, '', chat);
        if (chat.isCreator && message === 'status') return await chat.reply(isAnnonyMsgAlive === '' ? 'Theres no Anonymous Chat created yet' : `Anonymous Chat Recivers\n${isAnnonyMsgAlive}_`);
        const index = message.indexOf(',');
        if (index === -1) return await chat.reply('Invalid format. Please provide both number and Message separated by a comma.');
        let number = message.slice(0, index).trim() + '@s.whatsapp.net';
        let msg = message.slice(index + 1).trim();
        let parsed = await parsedJid(number) || [];
        if (parsed[0]) {
            const { date, time } = await getDateTime();
            const id = 'anony-msg-' + Math.floor
